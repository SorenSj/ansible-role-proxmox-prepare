---
- name: Configure unattended-upgrades
  ansible.builtin.copy:
    dest: /etc/apt/apt.conf.d/20auto-upgrades
    content: |
      APT::Periodic::Update-Package-Lists "1";
      APT::Periodic::Download-Upgradeable-Packages "1";
      APT::Periodic::AutocleanInterval "7";
      APT::Periodic::Unattended-Upgrade "1";
    mode: '0644'

- name: Create cron job for system updates
  ansible.builtin.cron:
    name: "Automatic updates"
    minute: "{{ update_schedule_time.split(':')[1] }}"
    hour: "{{ update_schedule_time.split(':')[0] }}"
    job: "apt update && apt full-upgrade -y && apt autoremove -y"
    state: present
  when: system_update_scheduler

- name: Upgrade all packages and reboot if necessary
  ansible.builtin.apt:
    upgrade: dist
    autoremove: yes
    autoclean: yes
  register: apt_upgrade_result

- name: Reboot the system if required
  ansible.builtin.reboot:
    msg: "Rebooting after package upgrade"
  when: 
    - apt_upgrade_result.reboot_required | default(false)
    - reboot_system | default(false)
    - update_system_now | default(false)
  register: reboot_result

- name: Wait for the system to come back online after reboot
  ansible.builtin.wait_for_connection:
    delay: 10
    timeout: 300
  when: reboot_result is changed

- name: Ensure Proxmox services are running after reboot
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: started
    enabled: true
  loop:
    - pvedaemon
    - pve-cluster
    - pve-manager
    - pveproxy
    - pvestatd
  when: reboot_result is changed
  